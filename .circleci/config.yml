version: 2.1

executors:
  node_12:
    docker:
      - image: node:12-buster
  node:
    docker:
      - image: node:16-buster
  snapcraft:
    docker:
      - image: cibuilds/snapcraft:stable

orbs:
  codecov: codecov/codecov@1.1.2

commands:
  test:
    description: Run Jest.
    parameters:
      path:
        type: string
        default: .
      coverage:
        type: boolean
        default: false
      script:
        type: string
        default: test
    steps:
      - run:
          name: Jest
          command: |
            cd << parameters.path >>
            export JEST_JUNIT_OUTPUT_DIR="$ARTIFACTS/test_results/jest"
            mkdir -p $JEST_JUNIT_OUTPUT_DIR
            yarn << parameters.script >> --ci <<# parameters.coverage >>--coverage<</ parameters.coverage >> --reporters="default" --reporters="jest-junit" --runInBand
          environment:
            JEST_JUNIT_OUTPUT_NAME: jest.xml
      - when:
          condition: << parameters.coverage >>
          steps:
            - run:
                name: Process coverage reports
                command: |
                  cp -v coverage/coverage-final.json $ARTIFACTS/coverage.json
                  tar -czvf $ARTIFACTS/coverage.tar.gz coverage/
            - codecov/upload:
                file: artifacts/coverage.json
  initialize:
    description: Initialize a JS project and create artifacts directory
    parameters:
      online:
        type: boolean
        default: false
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Node.js version
          command: |
            node --version
            npm --version
            yarn --version
      - run:
          name: Define Yarn cache directory
          command: |
            YARN_CACHE_FOLDER="$(pwd)/yarn_cache"
            echo "export YARN_CACHE_FOLDER=\"${YARN_CACHE_FOLDER}\"" >> $BASH_ENV
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-v5-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install Node modules
          # "--frozen-lockfile" doesn't work, see https://github.com/yarnpkg/yarn/issues/5840
          command: |
            CKSUM_BEFORE=$(cksum yarn.lock)
            ONLINE=<< parameters.online >>

            if [[ "$ONLINE" = true && ! -d "$YARN_CACHE_FOLDER" ]]; then
              mkdir -p $YARN_CACHE_FOLDER
              yarn install
            else
              yarn install --offline
            fi

            CKSUM_AFTER=$(cksum yarn.lock)

            if [[ $CKSUM_BEFORE != $CKSUM_AFTER ]]; then
              echo "yarn.lock is outdated"
              exit 1
            fi
      - when:
          condition: << parameters.online >>
          steps:
            - save_cache:
                name: Save Yarn cache
                key: yarn-v5-{{ .Branch }}-{{ checksum "yarn.lock" }}
                paths:
                  - yarn_cache
            - run:
                name: Compute release version
                command: |
                  RELEASE_VERSION_BASE="$(./node_modules/.bin/json version < lerna.json)"

                  if [[ -z "<< pipeline.git.tag >>" ]]; then
                    RELEASE_VERSION_FULL="${RELEASE_VERSION_BASE}-next.${CIRCLE_BUILD_NUM}+git.${CIRCLE_SHA1:0:7}"
                    RELEASE_GRADE=devel
                  else
                    RELEASE_VERSION_FULL="${RELEASE_VERSION_BASE}+git.${CIRCLE_SHA1:0:7}"
                    RELEASE_GRADE=stable
                  fi

                  echo "Release grade = $RELEASE_GRADE"
                  echo "Release version = $RELEASE_VERSION_FULL"

                  echo "$RELEASE_GRADE" > ./workspace/release-grade
                  echo "$RELEASE_VERSION_BASE" > ./workspace/version-base
                  echo "$RELEASE_VERSION_FULL" > ./workspace/version-full
            - persist_to_workspace:
                root: workspace
                paths:
                  - release-grade
                  - version-base
                  - version-full
      - run:
          name: Setup artifacts directory
          command: |
            ARTIFACTS="$(pwd)/artifacts"
            echo "export ARTIFACTS=\"${ARTIFACTS}\"" >> $BASH_ENV
            mkdir -p $ARTIFACTS
      - run:
          name: Set release version
          command: |
            RELEASE_GRADE="$(cat ./workspace/release-grade)"
            RELEASE_VERSION_BASE="$(cat ./workspace/version-base)"
            RELEASE_VERSION_FULL="$(cat ./workspace/version-full)"

            echo "export RELEASE_GRADE=\"${RELEASE_GRADE}\"" >> $BASH_ENV
            echo "export RELEASE_VERSION_BASE=\"${RELEASE_VERSION_BASE}\"" >> $BASH_ENV
            echo "export RELEASE_VERSION_FULL=\"${RELEASE_VERSION_FULL}\"" >> $BASH_ENV

            if [[ -z "<< pipeline.git.tag >>" ]]; then
              yarn lerna version --ignore-scripts --no-git-tag-version --no-private --no-push --yes "${RELEASE_VERSION_FULL}"
            fi
  finalize:
    description: Finalize a JS project build and upload its artifacts.
    parameters:
      persist:
        type: boolean
        default: true
    steps:
      - store_artifacts:
          path: artifacts
      - store_test_results:
          path: artifacts/test_results
      - when:
          condition: << parameters.persist >>
          steps:
            - persist_to_workspace:
                root: artifacts
                paths: ["*.tgz"]
  build:
    description: Run build and dist scripts.
    parameters:
      path:
        type: string
    steps:
      - run:
          name: Build
          command: |
            cd << parameters.path >>
            yarn build
      - run:
          name: Dist
          command: |
            cd << parameters.path >>
            yarn dist
            cp -v dist/* $ARTIFACTS

jobs:
  build_cli:
    executor: node_12
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - test:
          path: packages/undercut-cli
      - build:
          path: packages/undercut-cli
      - finalize

  build_struct:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: packages/undercut-struct
      - finalize

  build_node:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - test:
          path: packages/undercut-node
      - build:
          path: packages/undercut-node
      - finalize

  build_pull:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: packages/undercut-pull
      - finalize

  build_push:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: packages/undercut-push
      - finalize

  build_snap:
    executor: snapcraft
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: snap-build
      - run:
          name: Build snap
          command: |
            mkdir artifacts
            snapcraft
            cp -v ./undercut*.snap artifacts
      - store_artifacts:
          path: artifacts
      - persist_to_workspace:
          root: artifacts
          paths: ["*.snap"]

  build_types:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: packages/undercut-types
      - finalize

  build_utils:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: packages/undercut-utils
      - finalize

  build_web_2019:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - test:
          path: packages/undercut-web-2019
      - build:
          path: packages/undercut-web-2019
      - finalize

  build_website:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - build:
          path: website
      - finalize

  setup:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize:
          online: true
      - run:
          name: ESLint
          command: |
            mkdir -p $ARTIFACTS/test_results/eslint
            yarn lint --format="junit" --output-file="$ARTIFACTS/test_results/eslint/eslint.xml"
      - finalize:
          persist: false

  test_core:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - initialize
      - test:
          coverage: true
      - finalize:
          persist: false

  release:
    executor: node
    working_directory: /mnt/ramdisk
    steps:
      - attach_workspace:
          at: undercut
      - run:
          name: Compose release package
          command: |
            mkdir artifacts
            tar -cv -f "artifacts/undercut-$(cat ./undercut/version-full).tar" undercut
      - store_artifacts:
          path: artifacts

workflows:
  version: 2
  workflow:
    jobs:
      - setup:
          filters: &filters-release
            tags:
              only: /^v.*/
      - test_core:
          requires:
            - setup
          filters:
            <<: *filters-release
      - build_struct:
          requires:
            - test_core
          filters:
            <<: *filters-release
      - build_pull:
          requires:
            - test_core
          filters:
            <<: *filters-release
      - build_push:
          requires:
            - test_core
          filters:
            <<: *filters-release
      - build_types:
          requires:
            - test_core
          filters:
            <<: *filters-release
      - build_utils:
          requires:
            - test_core
          filters:
            <<: *filters-release
      - build_node:
          requires:
            - build_pull
            - build_push
            - build_utils
          filters:
            <<: *filters-release
      - build_cli:
          requires:
            - build_node
          filters:
            <<: *filters-release
      - build_snap:
          requires:
            - build_cli
            - build_node
          filters:
            <<: *filters-release
      - build_web_2019:
          requires:
            - build_pull
            - build_push
            - build_utils
          filters:
            <<: *filters-release
      - build_website:
          requires:
            - setup
          filters:
            <<: *filters-release
      - release:
          requires:
            - build_cli
            - build_struct
            - build_node
            - build_pull
            - build_push
            - build_snap
            - build_types
            - build_utils
            - build_web_2019
            - build_website
          filters:
            <<: *filters-release
