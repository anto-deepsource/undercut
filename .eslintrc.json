{
	"env": {
		"es2021": true
	},
	"extends": [
		"@spyke/eslint-config"
	],
	"ignorePatterns": [
		"**/__snapshots__/",
		"**/build/",
		"**/coverage/",
		"**/dist/",
		"**/node_modules/"
	],
	"overrides": [
		{
			"extends": [
				"plugin:@typescript-eslint/recommended"
			],
			"files": [
				"*.ts",
				"*.tsx"
			],
			"parser": "@typescript-eslint/parser",
			"plugins": [
				"@typescript-eslint/eslint-plugin"
			],
			"rules": {
				"@typescript-eslint/ban-ts-comment": "off", // We-re using ts-ignore and ts-expect-error.
				"@typescript-eslint/ban-types": [
					"error",
					{
						"extendDefaults": true,
						"types": {
							"Function": false,
							"object": false
						}
					}
				],
				"@typescript-eslint/explicit-module-boundary-types": "off", // Temporary.
				"@typescript-eslint/no-explicit-any": "off", // We're using any.
				"import/extensions": [
					"error",
					"always",
					{
						"ts": "never",
						"tsx": "never"
					}
				]
			},
			"settings": {
				"import/parsers": {
					"@typescript-eslint/parser": [
						".ts",
						".tsx"
					]
				},
				"import/resolver": {
					"node": {
						"extensions": [
							".cjs",
							".js",
							".jsx",
							".mjs",
							".ts",
							".tsx"
						]
					}
				}
			}
		},
		{
			"env": {
				// Disable jest globals to use it only from imports.
				"jest": false,
				"jest/globals": false
			},
			"extends": [
				"plugin:jest/recommended"
			],
			"files": [
				"**/*.test.*.@(js|ts)",
				"**/*.test.@(js|ts)"
			],
			"plugins": [
				"jest"
			],
			"rules": {
				"jest/expect-expect": "off"
			}
		},
		{
			"env": {
				"node": true
			},
			"files": [
				"**/*.@(c|m)js"
			]
		}
	],
	"parser": "@babel/eslint-parser",
	"parserOptions": {
		"babelOptions": {
			"rootMode": "upward"
		},
		"ecmaVersion": 2021,
		"sourceType": "module"
	},
	"plugins": [
		"@babel/eslint-plugin"
	],
	"root": true,
	"rules": {
		"quotes": [
			"error",
			"backtick"
		]
	},
	"settings": {
		"import/extensions": [
			".cjs",
			".js",
			".jsx",
			".mjs"
		],
		"import/resolver": {
			"node": {
				"extensions": [
					".cjs",
					".js",
					".jsx",
					".mjs"
				]
			}
		}
	}
}
